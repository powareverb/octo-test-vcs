step "deploy-a-package" {
    name = "Deploy a Package"
    properties = {
        Octopus.Action.TargetRoles = "VCSTestRole"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "TestVCS"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "TestVCS"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "plan-to-apply-a-terraform-template" {
    name = "Plan to apply a Terraform template"

    action {
        action_type = "Octopus.TerraformPlan"
        properties = {
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "False"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "True"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            Octopus.Action.Terraform.Template = <<-EOT
                terraform {
                  required_providers {
                    docker = {
                      source  = "kreuzwerker/docker"
                      version = "~> 3.0.1"
                    }
                  }
                }
                
                provider "docker" {}
                
                resource "docker_image" "nginx" {
                  name         = "nginx:latest"
                  keep_locally = false
                }
                
                resource "docker_container" "nginx" {
                  image = docker_image.nginx.image_id
                  name  = "tutorial"
                  ports {
                    internal = 80
                    external = 8000
                  }
                }
                
                EOT
            Octopus.Action.Terraform.TemplateParameters = "{}"
        }
        worker_pool_variable = ""
    }
}